// Local and aRest Cloud Dashboard 
// Required libraries
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <aREST.h>
#include "DHT.h"

// Assign DHT Sensor Pin
#define DHTPIN 4

// Use DHT11 sensor
#define DHTTYPE DHT11

// Initialize DHT sensor
DHT dht(DHTPIN, DHTTYPE, 15);

// Clients for aRest
WiFiClient espClient;
PubSubClient client(espClient);

// Create aREST instance
aREST rest = aREST(client);

// Unique ID to identify the device for cloud.arest.io
char* device_id = "My Key";

// WiFi parameters
const char* ssid = "My SSID";
const char* password = "My WiFI Pass";

// Variables to be exposed to the API
float temperature;
float humidity;
float light;
String local_ip = "";

// The port to listen for incoming TCP connections
#define LISTEN_PORT           80

// Create an instance of the server
WiFiServer server(LISTEN_PORT);

// Functions
void callback(char* topic, byte* payload, unsigned int length);

void setup(void) {

  // Start Serial
  Serial.begin(115200);
  //delay(10);

  // Init DHT
  dht.begin();

  // Set callback
  client.setCallback(callback);
  
  // Expose variables
  temperature = 0.0;
  humidity = 0.0;
  light = 0.0;
  rest.variable("temperature", &temperature);
  rest.variable("humidity", &humidity);
  rest.variable("light", &light);
  rest.variable("local_ip", &local_ip);
  
  // Give name and ID to device
  rest.set_id(device_id);
  rest.set_name("sensors");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.print("Connecting to ");
  Serial.println(ssid);
  Serial.println("WiFi connected");

  // Start the server
  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.println(WiFi.localIP());
  local_ip = ipToString(WiFi.localIP());
}

void loop() {

    // Connect to the cloud
  rest.handle(client);
  
  // Handle Local aREST calls
  WiFiClient clientLocal = server.available();
  if (!clientLocal) {
    return;
  }

    // Reading temperature and humidity
  humidity = dht.readHumidity();
  
  // Read temperature as Celsius
  temperature = dht.readTemperature();

  // Reading light level
  light = analogRead(0);
  
  while(!clientLocal.available()){
    delay(1);
  }
  //rest.handle(client);
  rest.handle(clientLocal);

}
// Handles message arrived on subscribed topic(s)
void callback(char* topic, byte* payload, unsigned int length) {

  rest.handle_callback(client, topic, payload, length);

}

// Convert IP address to String
String ipToString(IPAddress address)
{
  return String(address[0]) + "." +
    String(address[1]) + "." +
    String(address[2]) + "." +
    String(address[3]);
}
